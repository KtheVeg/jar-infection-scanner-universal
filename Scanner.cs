using System;
using Avalonia.Platform.Storage;
using Avalonia.Controls;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.IO.Compression;
using System.IO;

namespace jarinfectionscanneruniversal
{
	public class Scanner
	{
		private IStorageItem? scanDirectory;
		private TextBlock outputTextBlock;
		
		private static readonly byte[][] fileSignatures = new byte[][]
		{
			new byte[] { 0x38, 0x54, 0x59, 0x04, 0x10, 0x35, 0x54, 0x59, 0x05, 0x10, 0x2E, 0x54, 0x59, 0x06, 0x10, 0x32, 0x54, 0x59, 0x07, 0x10, 0x31, 0x54, 0x59, 0x08, 0x10, 0x37, 0x54, 0x59, 0x10, 0x06, 0x10, 0x2E, 0x54, 0x59, 0x10, 0x07, 0x10, 0x31, 0x54, 0x59, 0x10, 0x08, 0x10, 0x34, 0x54, 0x59, 0x10, 0x09, 0x10, 0x34, 0x54, 0x59, 0x10, 0x0A, 0x10, 0x2E, 0x54, 0x59, 0x10, 0x0B, 0x10, 0x31, 0x54, 0x59, 0x10, 0x0C, 0x10, 0x33, 0x54, 0x59, 0x10, 0x0D, 0x10, 0x30, 0x54, 0xB7 },
			new byte[] { 0x68, 0x54, 0x59, 0x04, 0x10, 0x74, 0x54, 0x59, 0x05, 0x10, 0x74, 0x54, 0x59, 0x06, 0x10, 0x70, 0x54, 0x59, 0x07, 0x10, 0x3a, 0x54, 0x59, 0x08, 0x10, 0x2f, 0x54, 0x59, 0x10, 0x06, 0x10, 0x2f, 0x54, 0x59, 0x10, 0x07, 0x10, 0x66, 0x54, 0x59, 0x10, 0x08, 0x10, 0x69, 0x54, 0x59, 0x10, 0x09, 0x10, 0x6c, 0x54, 0x59, 0x10, 0x0a, 0x10, 0x65, 0x54, 0x59, 0x10, 0x0b, 0x10, 0x73, 0x54, 0x59, 0x10, 0x0c, 0x10, 0x2e, 0x54, 0x59, 0x10, 0x0a, 0x10, 0x73, 0x54, 0x59, 0x10, 0x0e, 0x10, 0x6b, 0x54, 0x59, 0x10, 0x0f, 0x10, 0x79, 0x54, 0x59, 0x10, 0x10, 0x10, 0x72, 0x54, 0x59, 0x10, 0x11, 0x10, 0x61, 0x54, 0x59, 0x10, 0x12, 0x10, 0x67, 0x54, 0x59, 0x10, 0x13, 0x10, 0x65, 0x54, 0x59, 0x10, 0x14, 0x10, 0x2e, 0x54, 0x59, 0x10, 0x15, 0x10, 0x64 },
			new byte[] { 0x2d, 0x54, 0x59, 0x04, 0x10, 0x6a, 0x54, 0x59, 0x05, 0x10, 0x61, 0x54, 0x59, 0x06, 0x10, 0x72 }
		};
		
		public Scanner(IStorageItem? _scanDirectory, TextBlock _outputTextBlock)
		{
			scanDirectory = _scanDirectory;
			outputTextBlock = _outputTextBlock;
		}
		
		public async Task<bool> Scan()
		{
			if (scanDirectory != null)
			{
				await Task.Run(() =>
				{
					string[] files = Directory.GetFiles(scanDirectory.Path.ToString().Substring(7), "*.jar", SearchOption.AllDirectories);

					// Directory.GetFiles(scanDirectory.Path.ToString().Substring(7), "*.jar", SearchOption.AllDirectories).ToList().ForEach(file =>
					foreach (string file in files)
					{
						outputTextBlock.Text += string.Format("\n[{0}]: Scanning File: {1}", DateTime.Now.ToString(MainWindow.dateFormat), file);

						ZipArchive zipArchive = ZipFile.OpenRead(file);

						foreach (ZipArchiveEntry entry in zipArchive.Entries)
						{
							if (!entry.Name.EndsWith(".class"))
								continue;

							Stream fileStream = entry.Open();
							byte[] buffer = new byte[(int)entry.Length];

							fileStream.Read(buffer, 0, (int)entry.Length);

							foreach (byte[] signature in fileSignatures)
							{
								// Check if the file contains the signature
								if (buffer.Take(signature.Length).SequenceEqual(signature))
								{
									outputTextBlock.Text += string.Format("\n[{0}]: Infected File: {1}", DateTime.Now.ToString(MainWindow.dateFormat), file);
									continue;
								}

								// else
								outputTextBlock.Text += string.Format("\n[{0}]: Clean File: {1}", DateTime.Now.ToString(MainWindow.dateFormat), file);
							
							}
						}
					}
				});
			}
			return false;
		}
	}
}